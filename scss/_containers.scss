@use 'variables' as *;
@use 'utils' as *;

// region Containers
@include generate-color-classes;
// region Grid
%grid-base {
  display: grid;
}

.grid {
  @extend %grid-base;

  // Dynamic vertical columns (each is a column of stacked cells)
  &.cols {
    grid-auto-flow: column;
    //grid-template-columns: repeat(auto-fit, 1fr); // ← force equal column widths
    grid-template-columns: repeat(auto-fit, minmax(0, 1fr)); // 180px is minimal column width

    > .grid-col {
      overflow: hidden;

      //display: grid;
      //grid-template-rows: repeat(auto-fit, minmax(0, 1fr)); // 4rem = min cell height
    }
  }

  // Dynamic horizontal rows (each is a row of inline cells)
  &.rows {
    grid-auto-flow: row;

    > .grid-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(min-content, 1fr)); // 4rem = min cell width
    }
  }

}

@include generate-grid-gen-classes((1, 2, 3, 4, 5, 6, 7, 8, 9, 10));

// endregion

// region Flex
%flex-base {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
}

.flex {
  @extend %flex-base;
  &-unjust {
    @extend %flex-base;
    justify-content: unset;
  }
  &-row {
    @extend %flex-base;
    flex-direction: row;
  }
  &-col {
    @extend %flex-base;
    flex-direction: column;
  }
}
// endregion

// region Other
.container {
  overflow: scroll;
  background: $container;
  padding: $container-padding;
  border-radius: $container-border-radius;
  border-width: 1px;
  border-style: solid;
}
.card {
  background: $card;
  padding: $card-padding;
  border-radius: $card-border-radius;
  border-width: 1px;
  border-style: solid;
}
.fill {
  width: 100%;
  height: 100%;
  flex: 1;
}
.center {
  text-align: center;
  align-self: center;
  justify-self: center;
  align-items: center;
  justify-content: center;
}
.w {
  $widths: 10, 25, 33, 50, 66, 75, 90, 100;
  @each $width in $widths {
    &#{$width} {
      @include sub-widths($width);
    }
  }
}
.h {
  $heights: 10, 20, 25, 33, 50, 66, 75, 80, 90, 100;
  @each $height in $heights {
    &#{$height} {
      @include sub-heights($height);
    }
  }
}
// endregion

// endregion
