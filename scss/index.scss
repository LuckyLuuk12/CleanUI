// region Imports & Util
@use './variables' as *;

// Mixin for smooth hover transitions
@mixin transition($props...) {
  transition: $props 0.3s ease;
}

@mixin colored-button($name) {
  background: rgba(map-get($variables, $name + '-500'), $button-opacity);
  backdrop-filter: blur(24px);
  border: 2px solid map-get($variables, $name + '-900');

  &:hover {
    background: rgba(map-get($variables, $name + '-800'), $button-opacity);

  }
}

@mixin sub-widths($number) {
  min-width: unquote('#{$number}px');
  width: unquote("#{$number}%");
  max-width: unquote("#{$number}%");
}
@mixin sub-heights($number) {
  min-height: unquote('#{$number}px');
  height: unquote("#{$number}%");
  max-height: unquote("#{$number}%");
}

// First define the list of color names
$color-variants: (
  'primary',
  'secondary',
  'tertiary',
  'quaternary',
  'red',
  'green',
  'blue',
  'cyan',
  'yellow',
  'magenta'
);
$shades: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900);

@mixin generate-color-classes {
  @each $color in $color-variants {
    // Base color classes (using 500 shade)
    .#{$color} {
      background-color: map-get($variables, $color);
    }
    // Default text variant (using 500 shade)
    .#{$color}-text {
      color: map-get($variables, $color);
    }

    // Default border variant (using 500 shade)
    .#{$color}-border {
      border: 1px solid map-get($variables, $color);
    }
    .#{$color}-border-color {
      border-color: map-get($variables, $color);
    }

    // Default hover state (using 700 shade)
    .#{$color}-hover:hover {
      background-color: map-get($variables, "#{$color}-700");
    }

    // Generate classes for each shade
    @each $shade in $shades {
      // Background variants
      .#{$color}-#{$shade} {
        background: map-get($variables, "#{$color}-#{$shade}");
      }

      // Text variants
      .#{$color}-#{$shade}-text {
        color: map-get($variables, "#{$color}-#{$shade}");
      }

      // Border variants
      .#{$color}-#{$shade}-border {
        border: 1px solid map-get($variables, "#{$color}-#{$shade}");
      }
      .#{$color}-#{$shade}-border-color {
        border-color: map-get($variables, "#{$color}-#{$shade}");
      }

      // Hover variants for each shade
      .#{$color}-#{$shade}-hover:hover {
        background-color: map-get($variables, "#{$color}-#{if($shade < 900, $shade + 100, 900)}");
      }
    }
  }
}


// endregion

// region Core page styling
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}
html {
  height: 100%;
}
// Base styles
body {
  min-width: 100vw;
  max-width: 100vw;
  min-height: 100vh;
  height: 100%;
  font-family: $font;
  background: $background;
  color: $text;
}

// endregion

// region Buttons

/// region Buttons without an <i> inside
button {
  color: $button-text;
  font-weight: bold;
  @include transition(all);
  &:hover {
    transform: scale(1.05);
  }
}
button:not(:has(> i)) {
  cursor: pointer;
  background: rgba($button, $button-opacity);
  border: 1px solid $button-border;
  padding: $button-padding;
  border-radius: $border-radius;
  $color-variants: 'primary', 'secondary', 'tertiary', 'quaternary', 'red', 'green', 'blue', 'cyan', 'yellow', 'magenta';
  @each $variant in $color-variants {
    &.#{$variant} {
      @include colored-button($variant);
    }
  }
  &.small {
    padding: $button-padding-small;
  }
  &.large {
    padding: $button-padding-large;
  }
}
/// endregion

// region Containers
@include generate-color-classes;

%grid-base {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--min-width, 100px)), 1fr));
  grid-auto-rows: 1fr;
  //grid-template-columns: repeat(auto-fit, minmax(min-content, 1fr));
}
.grid {
  @extend %grid-base;
  // Span all columns in a row
  &-row {
    grid-column: 1 / -1;  // From first to last column
  }

  // Span all rows in a column
  &-col {
    grid-row: 1 / -1;     // From first to last row
  }
  // Makes all cells (at least) 1rem x 1rem (w x h)
  &-gen-1 {
    > * {
      min-width: 1rem;
      min-height: 1rem;
    }
  }
}

%flex-base {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
}

.flex {
  @extend %flex-base;
  &-unjust {
    @extend %flex-base;
    justify-content: unset;
  }
  &-row {
    @extend %flex-base;
    flex-direction: row;
  }
  &-col {
    @extend %flex-base;
    flex-direction: column;
  }
}

.container {
  background: $container;
  padding: $container-padding;
  border-radius: $container-border-radius;
}
.fill {
  width: 100%;
  height: 100%;
  flex: 1;
}
.w {
  $widths: 10, 25, 33, 50, 66, 75, 90, 100;
  @each $width in $widths {
    &#{$width} {
      @include sub-widths($width);
    }
  }
}
.h {
  $heights: 10, 20, 25, 33, 50, 66, 75, 80, 90, 100;
  @each $height in $heights {
    &#{$height} {
      @include sub-heights($height);
    }
  }
}
// endregion

// endregion
